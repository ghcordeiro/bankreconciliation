version: "3.8"

services:

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reconciliation_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - backend

  api:
    build:
      context: ./api
    container_name: api
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_R2DBC_URL: r2dbc:postgresql://postgres:5432/reconciliation_db
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: postgres
    networks:
      - backend

  reconciliation-worker:
    build:
      context: ./reconciliation-worker
    container_name: reconciliation_worker
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_R2DBC_URL: r2dbc:postgresql://postgres:5432/reconciliation_db
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: postgres
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
